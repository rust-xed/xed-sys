#!/usr/bin/env bash

export RUST_BACKTRACE=1

mkdir -p target/artifacts
OUT_DIR=$(pwd)/target cargo run --bin build-xed

# Every architecture I've tried has given the same result
# here so either clang's preprocessor ignores target when
# preprocessing or the generated code is target-independant
# (at least from a source-code point of view)
triple=x86_64-unknown-unknown

clang -E -P -CC xed.c -o target/artifacts/xed-$triple.i -Itarget/install/include -Dstatic= -Dinline= -D__inline= -D__inline__=

echo '[{ "directory": ".", "command": "", "file": "target/artifacts/xed-'$triple'.i" }]' > compile-commands.json
c2rust transpile --overwrite-existing compile-commands.json

lower_triple=$(echo $triple | sed 's/-/_/g')
cargo run --bin remove-methods -- target/artifacts/xed_$lower_triple.rs target/xed-$triple.rs
rustfmt target/xed-$triple.rs

# C2Rust names types that clash with rust's keywords
# <kw>_0 whereas bindgen uses <kw>_. Here, we convert
# between those two forms.
# Should any new errors like this show up, add more
# statements here.
sed 's/type_0/type_/g' -i target/xed-$triple.rs
sed 's/mod_0/mod_/g' -i target/xed-$triple.rs
sed 's/i64_0/i64/g' -i target/xed-$triple.rs
sed 's/u64_0/u64/g' -i target/xed-$triple.rs

cp -f target/xed-$triple.rs ../src/xed-c2rust.rs

rm compile-commands.json
